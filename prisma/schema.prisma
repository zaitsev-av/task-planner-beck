// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  createdAd DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  email String @unique
  name String?
  password String

  //pamador
  workInterval Int? @default(45) @map("work_interval")
  breaklInterval Int? @default(15) @map("break_interval")
  intervalsCount Int? @default(5) @map("interval_count")

  //entity relations
  tasks Task[]
  timeBloks TimeBlock[]
  pomodoroSessions PomodoroSession[]

  @@map("user")
}

model Task {
  id String @id @default(cuid())
  createdAd DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  name String
  priority Priority?
  isComploted Boolean @default(false) @map("is_complited")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id String @id @default(cuid())
  createdAd DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  name String
  color String?
  duration Int
  order Int @default(1)

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSession {
  id String @id @default(cuid())
  createdAd DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  isComploted Boolean @default(false) @map("is_complited")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  //entity relations
  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id String @id @default(cuid())
  createdAd DateTime @default(now()) @map("created_at")
  updatedAd DateTime @updatedAt @map("updated_at")

  totalSeconds Int @map("total_seconds")
  isComploted Boolean @default(false) @map("is_complited")

  pomodoroSession PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

enum  Priority {
  low
  medium
  high
}